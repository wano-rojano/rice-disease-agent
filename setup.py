#!/usr/bin/env python3
"""Setup script to help users configure the agent."""

import os
import sys
from pathlib import Path


def create_env_file():
    """Create a .env file with user configuration."""
    print("üöÄ LangGraph Agent Setup")
    print("=" * 50)
    print("\nThis script will help you set up your environment configuration.\n")
    
    # Check if .env already exists
    if Path(".env").exists():
        response = input(".env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    config = []
    
    # LLM Configuration
    print("\n1. OpenAI Configuration:")
    
    openai_key = input("Enter your OpenAI API key: ").strip()
    config.append(f"OPENAI_API_KEY={openai_key}")
    config.append("TOOL_LLM_URL=https://api.openai.com/v1")
    
    model = input("Enter OpenAI model name (default: gpt-4.1-mini): ").strip()
    if not model:
        model = "gpt-4.1-mini"
    config.append(f"TOOL_LLM_NAME={model}")
    
    # Tavily API Key
    print("\n2. Web Search Configuration")
    print("   Tavily is used for web search. Get your API key from: https://tavily.com")
    tavily_key = input("Enter your Tavily API key: ").strip()
    config.append(f"TAVILY_API_KEY={tavily_key}")
    
    # RAG Configuration
    print("\n3. RAG Configuration")
    print("   Note: RAG uses OpenAI API for embeddings")
    
    data_dir = input("Enter data directory for PDFs (default: data): ").strip()
    if not data_dir:
        data_dir = "data"
    config.append(f"RAG_DATA_DIR={data_dir}")
    config.append("OPENAI_CHAT_MODEL=gpt-4.1")
    
    # Write .env file
    with open(".env", "w") as f:
        f.write("# LangGraph Agent Configuration\n")
        f.write("# Generated by setup.py\n\n")
        f.write("\n".join(config))
        f.write("\n")
    
    print("\n‚úÖ Configuration saved to .env")
    
    # Create data directory
    Path(data_dir).mkdir(exist_ok=True)
    print(f"‚úÖ Created {data_dir} directory for PDF documents")
    
    print("\nüéâ Setup complete!")
    print("\nNext steps:")
    print("1. Add PDF documents to the 'data' directory (optional)")
    print("2. Run the agent: uv run python -m app")
    print("3. Test with: uv run python app/test_client.py")


def main():
    """Main setup function."""
    try:
        create_env_file()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
